"""
Tadd Trumbull & Elizabeth Matos
CPTR-215
12/13/2023
Budget Calculator with Tracking functionality within the year.

Resources:
https://www.w3schools.com/python/python_json.asp
https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/index.html (and all of its facets)
https://doc.qt.io/qtforpython-6/PySide6/QtCharts/index.html
"""

import json
import os

from PySide6.QtWidgets import QApplication, QMainWindow, QPushButton, \
     QGridLayout, QLabel, QLineEdit, QVBoxLayout, QWidget, \
     QTableWidget, QTableWidgetItem, QMessageBox, QComboBox, QStackedWidget
from PySide6.QtCharts import QChart, QChartView, QPieSeries

class BudgetWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Monthly Budget')
        self.setGeometry(240,500,240,500)
        
        #Creating a dropdown list to select the month of the budget
        self.combobox1 = QComboBox()
        self.combobox1.addItems(['January', 'Feburary', 'March', 'April', 'May',
                            'June', 'July', 'August', 'September', 'October', 'November', 'December'])
        self.combobox1.currentIndexChanged.connect(self.load_data)
        
        layout = QGridLayout()
        layout.addWidget(self.combobox1)
        
        #Creating Income Text as a label
        income_label = QLabel('Income:')
        layout.addWidget(income_label, 1, 0)
        
        #Creating Income text box with placeholder text.
        self.income_item = QLineEdit()
        self.income_item.setPlaceholderText('Enter Income')
        layout.addWidget(self.income_item, 2, 0)
        
        #Creating expense label.
        expense_label = QLabel('Expenses:')
        layout.addWidget(expense_label, 3, 0)
        
        #Creating two column table that has the headers Item and Amount so that we may add items and prices to it.
        self.table = QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(['Item', 'Amount'])
        layout.addWidget(self.table, 4, 0, 1, 2)
        
        # Connect textChanged signals to the calculateExpenses method
        self.income_item.textChanged.connect(self.calculateExpenses)
        for row in range(self.table.rowCount()):
            item_amount = self.table.item(row, 1)
            if item_amount:
                item_amount.textChanged.connect(self.calculateExpenses)
        
        #Adding Add Row button to call add_item function.
        self.add_item_button = QPushButton('Add Row')
        self.add_item_button.clicked.connect(self.add_item)
        layout.addWidget(self.add_item_button, 5, 0)
        
        #Adding Delete Expense button to call delete_item function.
        self.delete_item_button = QPushButton('Delete Expense')
        self.delete_item_button.clicked.connect(self.delete_item)
        layout.addWidget(self.delete_item_button, 5, 1)
        
        self.table.cellChanged.connect(self.calculateExpenses)
        
        #Adding Result label so that the program knows where to put the calculation in the window.
        self.result_label = QLabel()
        layout.addWidget(self.result_label, 7, 0, 1, 2)
        
        #Adding graph button to call ChartView (this allows us to shift over to the pie chart breakdown of expenses and items)
        self.graph_button = QPushButton('View Graph')
        self.graph_button.clicked.connect(self.ChartView)
        layout.addWidget(self.graph_button, 8, 0)
        
        #Adding Information button that calls budget_info which includes a popup window with information.
        self.info_button = QPushButton('Need Help?')
        self.info_button.clicked.connect(self.budget_info)
        layout.addWidget(self.info_button, 9, 0, 1, 2)
        
        self.reset_button = QPushButton('Reset Budget')
        self.reset_button.clicked.connect(self.confirm_reset_budget)  # Connect to the confirmation method
        layout.addWidget(self.reset_button, 10, 0, 1, 2)

            
        self.widget = QWidget()
        self.widget.setLayout(layout)
        self.setCentralWidget(self.widget)
        
        self.stacked_widget = QStackedWidget()
        self.stacked_widget.addWidget(self.widget)
        self.setCentralWidget(self.stacked_widget)
    
        self.load_data()

    def confirm_reset_budget(self):
        """
        Connected to reset budget button that clears all data in the json file when called.
        """
        reply = QMessageBox.question(self, 'Reset Budget', 'Are you sure you want to reset the budget?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.reset_budget()

    def reset_budget(self):
        """
        Clears all budget fields and removes the stored data.
        """
        self.clear_fields()
        try:
            os.remove('budget_data.json')
        except FileNotFoundError:
            pass
    
    def load_data(self):
        """
        Loads existing budget data from a json file.
        """
        selected_month = self.combobox1.currentText()

        try:
            with open('budget_data.json', 'r') as file:
                all_data = json.load(file)
                if selected_month in all_data:
                    data = all_data[selected_month]
                    self.populate_data(data)
                else:
                    self.clear_fields()

        except FileNotFoundError:
            self.clear_fields()

    def save_data(self):
        """
        Saves entered data into a file for the selected month.
        """
        selected_month = self.combobox1.currentText()
        income = self.income_item.text()
        expenses = []

        for row in range(self.table.rowCount()):
            item = self.table.item(row, 0).text()
            amount = self.table.item(row, 1).text()
            expenses.append((item, amount))
        try:
            with open('budget_data.json', 'r') as file:
                all_data = json.load(file)
        except FileNotFoundError:
            all_data = {}

        all_data[selected_month] = {'income': income, 'expenses': expenses}
        with open('budget_data.json', 'w') as file:
            json.dump(all_data, file)

    def clear_fields(self):
        """
        Clear all fields when called.
        """
        self.income_item.clear()
        self.table.setRowCount(0)
        self.result_label.clear()

    def populate_data(self, data):
        """
        Populates the budget fields with data for the selected month.
        """
        self.clear_fields()

        income = data['income']
        expenses = data['expenses']
        self.income_item.setText(str(income))

        self.table.setRowCount(len(expenses))
        for row, (item, amount) in enumerate(expenses):
            item_name = QTableWidgetItem(item)
            item_amount = QTableWidgetItem(str(amount))
            self.table.setItem(row, 0, item_name)
            self.table.setItem(row, 1, item_amount)

        self.calculateExpenses()

    def calculateExpenses(self):
        """
        Grabs Income string from textbox, converts to float and stores in income variable
        loop goes over every row in the table and checks if it has text in it. If it does,
        convert that text into a float and add that to a total expense number.
        
        Finally, calculate balance and set result_label text to the calculation.
        """
        income_text = self.income_item.text()
        income = float(income_text) if income_text else 0.0
        total_expenses = 0.0

        for row in range(self.table.rowCount()):
            expense_item = self.table.item(row, 1)
            if expense_item is not None:
                expense_text = expense_item.text() if expense_item.text() else '0.0'
                expense = float(expense_text)
                total_expenses += expense
                expense_item.setText("{:.2f}".format(expense))

        remaining_balance = income - total_expenses
        self.result_label.setText(f"Remaining Balance: ${remaining_balance:.02f}")
        self.save_data()

            
    def add_item(self):
        """
        Determine row position, insert row into that position and then insert name and amount box.
        """
        row_position = self.table.rowCount()
        self.table.insertRow(row_position)
        
        item_name = QTableWidgetItem()
        self.table.setItem(row_position, 0, item_name)
        
        item_amount = QTableWidgetItem()
        self.table.setItem(row_position, 1, item_amount)
        
    def delete_item(self):
        """
        Grabs current row that is selected and when the button is clicked, popup window appears asking for confirmation.
        If yes, remove said row.
        """
        current_row = self.table.currentRow()
        if current_row > -1:
            reply = QMessageBox.question(self, 'Delete Item', 'Are you sure you want to delete this item?',
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.table.removeRow(current_row)
                self.calculateExpenses()
                
    def ChartView(self):
        """
        Create Pie chart, iterate over every item and amount value and then create a visual pie chart with said data.
        """
        self.series = QPieSeries()
        for row in range(self.table.rowCount()):
            income = self.table.item(row, 0).text()
            expense = float(self.table.item(row, 1).text())
            slice_ = self.series.append(income, expense)

        self.chart = QChart()
        self.chart.addSeries(self.series)
        self.chart.setTitle("Monthly Expense")
        self._chart_view = QChartView(self.chart)
        # Adding a back button to return to the original window
        self.back_button = QPushButton('Back')
        self.back_button.clicked.connect(self.showBudgetWindow)  # Connect back button to showBudgetWindow method
        # Create a layout for the chart and back button
        layout = QVBoxLayout()
        layout.addWidget(self._chart_view)
        layout.addWidget(self.back_button)
        widget = QWidget()
        widget.setLayout(layout)
        self.stacked_widget.addWidget(widget)  # Add the chart view to the stacked widget
        self.stacked_widget.setCurrentWidget(widget)  # Switch to the chart view

    def showBudgetWindow(self):
        """
        Show the original budget window when the back button is clicked
        """
        self.stacked_widget.setCurrentWidget(self.widget)  # Switch to the original budget window
        
    def budget_info(self):
        """
        Popup window to assist user with text explaining how the application works.
        """
        description = ("- Income represents the total amount of money you earn.\n"
                       "- Expenses represent the total amount of money you spend on various items.\n"
                       "Use the 'Add Row' button to add expenses, and 'Delete Expense' button to remove them.\n"
                       "I hope this helps a tiny bit! \n")
        QMessageBox.information(self, 'Need Help?', description)
        
if __name__ == "__main__":
    app = QApplication([])
    window = BudgetWindow()
    window.show()
    app.exec()
