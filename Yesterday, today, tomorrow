"""date.py
Prof. O & CPTR-215
2021-09-29
2021-09-27 first draft
"""
class Date:
    def __init__(self, year, month, day):
        """Initializes a date given a year, month, and day.
        >>> today = Date(2021, 9, 27)
        >>> today.day
        27
        >>> Date(1776, 7, 4).year
        1776
        """
        self.year = year
        self.month = month
        self.day = day
    def day_of_week(self):
        """Determines the day of the week self falls on. 1 = Sun thru 7 = Sat.
        >>> today = Date(2021, 9, 27)
        >>> today.day_of_week()
        2
        >>> Date(2021, 9, 25).day_of_week()
        7
        >>> Date(1776, 7, 4).day_of_week()
        5
        """
        if self.month < 3:
            m = self.month + 12
            y = self.year - 1
        else:
            m = self.month
            y = self.year
        dow = (self.day + (13 * (m + 1)) // 5 + \
               y + y // 4 - y //  100 + y // 400) % 7
        return 7 if dow == 0 else dow
    def is_leap_year(self):
        """Determines whether self is in a leap year.
        >>> Date(2021, 9, 29).is_leap_year()
        False
        >>> Date(1984, 4, 27).is_leap_year()
        True
        >>> Date(2000, 1, 1).is_leap_year()
        True
        >>> Date(1900, 11, 30).is_leap_year()
        False
        """
        return self.year % 400 == 0 or \
               (self.year % 4 == 0 and self.year % 100 != 0)

    def previous_day(self):
        prevDate = Date(self.year, self.month, self.day)
        months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
        if Date.is_leap_year(self):
            months[2] = 29
            
        if self.day == 1 and self.month == 1:
            prevDate.year = self.year - 1
            prevDate.month = 12
            prevDate.day = 31
        elif self.day == 1:
            prevDate.month = self.month - 1
            prevDate.day = months[prevDate.month]  
        else:
            prevDate.day = self.day - 1
        
        return prevDate
    
    def next_day(self):
        nextDate = Date(self.year, self.month, self.day)
        months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
        if Date.is_leap_year(self):
            months[2] = 29
            
        if self.day == 31 and self.month == 12:
            nextDate.year = self.year + 1
            nextDate.month = 1
            nextDate.day = 1
        elif self.day == months[self.month]:
            nextDate.month = self.month + 1
            nextDate.day = 1
        else:
            nextDate.day = self.day + 1
        
        return nextDate       
    def __str__(self):
        """Returns a human-readable string representation of self
        in MMM d, yyyy format.
        >>> Date(2000, 1, 1).__str__() # not common
        'Jan 1, 2000'
        >>> str(Date(2021, 9, 27))
        'Sep 27, 2021'
        >>> independence = Date(1776, 7, 4)
        >>> print(independence)
        Jul 4, 1776
        """
        month_name = "BAD Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split()[self.month]
        return f"{month_name} {self.day}, {self.year}"
    def __repr__(self):
        """Returns a string that would evaluate to an identical Date object.
        >>> Date(2021, 9, 29).__repr__() # not common
        'Date(2021, 9, 29)'
        >>> Date(1970, 12, 31)
        Date(1970, 12, 31)
        >>> repr(Date(1984, 2, 20))
        'Date(1984, 2, 20)'
        """
        return f"Date({self.year}, {self.month}, {self.day})"
    def is_leap_year(self):
        """Determines whether self is in a leap year.
        >>> Date(2021, 9, 29).is_leap_year()
        False
        >>> Date(1984, 4, 27).is_leap_year()
        True
        >>> Date(2000, 1, 1).is_leap_year()
        True
        >>> Date(1900, 11, 30).is_leap_year()
        False
        """
        return self.year % 400 == 0 or \
               (self.year % 4 == 0 and self.year % 100 != 0)
    def copy(self):
        new_date = Date(self.month,self.date,self.year)
        return new_date
    def equals(self, other):
        if self.year == other.year and self.month == other.month and self.day == other.day:
            return True
        else:
            return False
    def before(self, other):
        """
        >>> Date.before(Date(2017, 1, 1),(Date(2020, 2, 3)))
        False
        Date.before(Date(2019, 1, 2),(Date(2019, 3, 4)))
        False
        """
        if self.year < other.year:
            return True
        elif self.year == other.year:
            if self.month < other.month:
                return True
            elif self.month == other.month:
                if self.day < other.day:
                    return True
                else:
                    return False
            else:
                return False
        else:
            return False

    def after(self, other):
        """
        >>> Date.after(Date(2017, 1, 1),(Date(2020, 2, 3)))
        True
        Date.after(Date(2019, 1, 2),(Date(2019, 3, 4)))
        True
        """
        if self.year > other.year:
            return True
        elif self.year == other.year:
            if self.month > other.month:
                return True
            elif self.month == other.month:
                if self.day > other.day:
                    return True
                else:
                    return False
            else:
                return False
        else:
            return False 

if __name__ == "__main__":
    new_date = Date(4,12,2020)
    print('Date : ' + str(new_date))
    print('Leap Year : ' + str(new_date.is_leap_year()))
    print('Day of week : ' + str(new_date.day_of_week()))
    date1 = Date(2000, 10,21)
    print('Date : ' + str(date1))
    print('Day of week : ' + str(date1.day_of_week()))
import doctest
doctest.testmod()
